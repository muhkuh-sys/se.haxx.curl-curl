#! /bin/bash
set -e

TARGET=$1

JONCHKI_VERSION=0.0.3.1
JONCHKI_VERBOSE=info

# Get the path to this script. Found here: https://stackoverflow.com/questions/59895/getting-the-source-directory-of-a-bash-script-from-within
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
	DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
	SOURCE="$(readlink "$SOURCE")"
	[[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
PRJ_DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"


# Check for all build dependencies.
declare -a -r astrDeb=(
	"autogen"
	"gettext"
	"groff-base"
	"lua5.1"
	"lua-sql-sqlite3"
	"lua-filesystem"
	"lua-expat"
	"m4"
	"p7zip-full"
	"pkg-config"
	"xz-utils"
)
declare -a astrInstall=()
for strDeb in "${astrDeb[@]}"
do
	DPKG_STATUS=`dpkg-query -W -f='${Status}' ${strDeb} || echo 'unknown'`
	if [ "$DPKG_STATUS" != "install ok installed" ]; then
		astrInstall+=("${strDeb}")
	fi
done
if [ ${#astrInstall[@]} -gt 0 ]; then
	sudo apt-get update --assume-yes
	sudo apt-get install --assume-yes ${astrInstall[@]}
fi


if [ "$TARGET" == "linux" ]; then
	CMAKE_COMPILER=""
	CMAKE_PLATFORM=""
	JONCHKI_SYSTEM=""
	TOOLS_PATH=${PATH}

elif [ "$TARGET" == "windows32" ]; then
	CMAKE_CROSS_COMPILER="-DCMAKE_TOOLCHAIN_FILE=${PRJ_DIR}/cmake/toolchainfiles/toolchain_windows_32.cmake"
	CMAKE_PLATFORM="-DJONCHKI_PLATFORM_DIST_ID=windows -DJONCHKI_PLATFORM_DIST_VERSION="" -DJONCHKI_PLATFORM_CPU_ARCH=x86"
	JONCHKI_SYSTEM="--distribution-id windows --empty-distribution-version --cpu-architecture x86"

elif [ "$TARGET" == "windows64" ]; then
	CMAKE_CROSS_COMPILER="-DCMAKE_TOOLCHAIN_FILE=${PRJ_DIR}/cmake/toolchainfiles/toolchain_windows_64.cmake"
	CMAKE_PLATFORM="-DJONCHKI_PLATFORM_DIST_ID=windows -DJONCHKI_PLATFORM_DIST_VERSION="" -DJONCHKI_PLATFORM_CPU_ARCH=x86_64"
	JONCHKI_SYSTEM="--distribution-id windows --empty-distribution-version --cpu-architecture x86_64"

elif [ "$TARGET" == "raspberry" ]; then
	CMAKE_CROSS_COMPILER="-DCMAKE_TOOLCHAIN_FILE=${PRJ_DIR}/cmake/toolchainfiles/toolchain_ubuntu_arm64.cmake"
	CMAKE_PLATFORM="-DJONCHKI_PLATFORM_DIST_ID=ubuntu -DJONCHKI_PLATFORM_DIST_VERSION=18.04 -DJONCHKI_PLATFORM_CPU_ARCH=arm64"
	JONCHKI_SYSTEM="--distribution-id ubuntu --distribution-version 18.04 --cpu-architecture arm64"

else
	echo "Unknown build target: ${TARGET}"
	exit -1
fi

BUILD_DIR=${PRJ_DIR}/build/${TARGET}
mkdir -p ${BUILD_DIR}
mkdir -p ${BUILD_DIR}/external
mkdir -p ${BUILD_DIR}/build_requirements
mkdir -p ${BUILD_DIR}/curl


# Install jonchki.
python2.7 jonchki/jonchkihere.py --jonchki-version ${JONCHKI_VERSION} --local-archives ${PRJ_DIR}/jonchki/local_archives ${PRJ_DIR}/build
if [ -f ${PRJ_DIR}/build/.jonchki.cmd ]; then
	JONCHKI=$(<${PRJ_DIR}/build/.jonchki.cmd)
fi
if [ "${JONCHKI}" == "" ]; then
	echo "Failed to extract the jonchki command from the jonchkihere output."
	exit 1
fi


# Get the build requirements.
pushd ${BUILD_DIR}/build_requirements
rm -f curl/curl-*.xml
cmake -DBUILDCFG_ONLY_JONCHKI_CFG="ON" -DCMAKE_INSTALL_PREFIX="" ${CMAKE_CROSS_COMPILER} ${CMAKE_PLATFORM} ${PRJ_DIR}
make
${JONCHKI} install-dependencies --syscfg ${PRJ_DIR}/jonchki/jonchkisys.cfg --prjcfg ${PRJ_DIR}/jonchki/jonchkicfg.xml ${JONCHKI_SYSTEM} --build-dependencies curl/curl-*.xml
popd
ZLIB_PREFIX="${BUILD_DIR}/build_requirements/jonchki/install/dev"


# Build the external components.
pushd ${BUILD_DIR}/external
cmake -DCMAKE_INSTALL_PREFIX="" ${CMAKE_CROSS_COMPILER} ${CMAKE_PLATFORM} -DZLIB_PREFIX=${ZLIB_PREFIX} ${PRJ_DIR}/external
make
popd
# Get the additional CMAKE search paths.
CMAKE_MODULES="-DLibSSH2_DIR='${BUILD_DIR}/external/libssh2/install/lib/cmake/libssh2' -Dnet.zlib-zlib_DIR='${BUILD_DIR}/build_requirements/jonchki/install/dev/cmake' -DLIBGMP_DIR='${BUILD_DIR}/external/gmp/install' -DLIBNETTLE_DIR='${BUILD_DIR}/external/libnettle/install' -DLIBGCRYPT_DIR=${BUILD_DIR}/external/libgcrypt/install -DLIBGPG_ERROR_DIR=${BUILD_DIR}/external/libgpg-error/install"

# Fix the nettle install path.
if [ -d ${BUILD_DIR}/external/libnettle/install/lib64 ]; then
	ln --symbolic lib64 ${BUILD_DIR}/external/libnettle/install/lib
fi


# Build curl.
pushd ${BUILD_DIR}/curl
cmake -DBUILDCFG_ONLY_JONCHKI_CFG="OFF" -DCMAKE_INSTALL_PREFIX="" ${CMAKE_CROSS_COMPILER} ${CMAKE_PLATFORM} ${CMAKE_MODULES} ${PRJ_DIR}
make pack
popd
