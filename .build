#! /bin/bash
set -e

TARGET=$1

# Get the path to this script. Found here: https://stackoverflow.com/questions/59895/getting-the-source-directory-of-a-bash-script-from-within
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
	DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
	SOURCE="$(readlink "$SOURCE")"
	[[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
PRJ_DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"


# Install the project specific build dependencies.
# First check if the packets are already installed.
DPKG_STATUS0=`dpkg-query -W -f='${Status}' gettext || echo 'unknown'`
DPKG_STATUS1=`dpkg-query -W -f='${Status}' groff-base || echo 'unknown'`
DPKG_STATUS2=`dpkg-query -W -f='${Status}' m4 || echo 'unknown'`
DPKG_STATUS3=`dpkg-query -W -f='${Status}' pkg-config || echo 'unknown'`
if [ "$DPKG_STATUS0" != "install ok installed" ] || [ "$DPKG_STATUS1" != "install ok installed" ] || [ "$DPKG_STATUS2" != "install ok installed" ] || [ "$DPKG_STATUS3" != "install ok installed" ]; then
	sudo apt-get update --assume-yes
	sudo apt-get install --assume-yes gettext groff-base m4 pkg-config
fi


if [ "$TARGET" == "linux" ]; then
	CMAKE_COMPILER=""
	JONCHKI_SYSTEM=""
	TOOLS_PATH=${PATH}

elif [ "$TARGET" == "windows32" ]; then
	CMAKE_COMPILER="-DCMAKE_C_FLAGS=-m32 -DCMAKE_CXX_FLAGS=-m32 -DCMAKE_SYSTEM_NAME=Windows -DCMAKE_C_COMPILER=i686-w64-mingw32-gcc -DCMAKE_CXX_COMPILER=i686-w64-mingw32-g++ -DCMAKE_RC_COMPILER=i686-w64-mingw32-windres"
	JONCHKI_SYSTEM="--distribution-id windows --cpu-architecture x86"
	TOOLS_PATH=/usr/mingw-w64-i686/bin:${PATH}

elif [ "$TARGET" == "windows64" ]; then
	CMAKE_COMPILER="-DCMAKE_C_FLAGS=-m64 -DCMAKE_CXX_FLAGS=-m64 -DCMAKE_SYSTEM_NAME=Windows -DCMAKE_C_COMPILER=x86_64-w64-mingw32-gcc -DCMAKE_CXX_COMPILER=x86_64-w64-mingw32-g++ -DCMAKE_RC_COMPILER=x86_64-w64-mingw32-windres"
	JONCHKI_SYSTEM="--distribution-id windows --cpu-architecture x86_64"
	TOOLS_PATH=/usr/mingw-w64-x86_64/bin:${PATH}

else
	echo "Unknown build target: ${TARGET}"
	exit -1
fi

BUILD_DIR=${PRJ_DIR}/build/${TARGET}
mkdir -p ${BUILD_DIR}
mkdir -p ${BUILD_DIR}/external
mkdir -p ${BUILD_DIR}/build_requirements
mkdir -p ${BUILD_DIR}/curl


# Install jonchki v0.0.2.1 .
python2.7 jonchki/jonchkihere.py --jonchki-version 0.0.2.1 --local-archives ${PRJ_DIR}/jonchki/local_archives ${PRJ_DIR}/build
# This is the path to the jonchki tool.
JONCHKI=${PRJ_DIR}/build/jonchki-0.0.2.1/jonchki


# Get the build requirements.
pushd ${BUILD_DIR}/build_requirements
rm -f curl/curl-*.xml
cmake -DBUILDCFG_ONLY_JONCHKI_CFG="ON" -DCMAKE_INSTALL_PREFIX="" ${CMAKE_COMPILER} ${PRJ_DIR}
make
${JONCHKI} install-dependencies --syscfg ${PRJ_DIR}/jonchki/jonchkisys.cfg --prjcfg ${PRJ_DIR}/jonchki/jonchkicfg.xml ${JONCHKI_SYSTEM} --build-dependencies curl/curl-*.xml
popd


# Build the external components.
pushd ${BUILD_DIR}/external
PATH=${TOOLS_PATH} cmake -DCMAKE_INSTALL_PREFIX="" ${CMAKE_COMPILER} ${PRJ_DIR}/external
PATH=${TOOLS_PATH} make
popd
# Get the additional CMAKE search paths.
CMAKE_MODULES="-DLibSSH2_DIR='${BUILD_DIR}/external/libssh2/install/lib/cmake/libssh2' -Dnet.zlib-zlib_DIR='${BUILD_DIR}/build_requirements/jonchki/install/dev/cmake' -DLIBGMP_DIR='${BUILD_DIR}/external/gmp/install' -DLIBNETTLE_DIR='${BUILD_DIR}/external/libnettle/install' -DLIBGCRYPT_DIR=${BUILD_DIR}/external/libgcrypt/install -DLIBGPG_ERROR_DIR=${BUILD_DIR}/external/libgpg-error/install"


# Build curl.
pushd ${BUILD_DIR}/curl
PATH=${TOOLS_PATH} cmake -DBUILDCFG_ONLY_JONCHKI_CFG="OFF" -DCMAKE_INSTALL_PREFIX="" ${CMAKE_COMPILER} ${CMAKE_MODULES} ${PRJ_DIR}
PATH=${TOOLS_PATH} make pack
popd
