cmake_minimum_required(VERSION 3.2.3)

PROJECT("curl")

INCLUDE(ExternalProject)

# Python is needed for the patch tool.
FIND_PACKAGE(PythonInterp 2.7 REQUIRED)

SET(VERSION_EXTERNAL "7.51.0")
SET(VERSION_PACKAGE  "1")
SET(PROJECT_VERSION  "${VERSION_EXTERNAL}.${VERSION_PACKAGE}")

# Get the VCS version for the jonchki configuration.
INCLUDE(${CMAKE_HOME_DIRECTORY}/cmake/version.cmake)

# Filter the jonchki configuration.
CONFIGURE_FILE(installer/curl.xml
               ${CMAKE_CURRENT_BINARY_DIR}/curl-${PROJECT_VERSION}.xml
               @ONLY)

#----------------------------------------------------------------------------
#
# Build the project.
#

IF((${BUILDCFG_ONLY_JONCHKI_CFG} STREQUAL "OFF"))
	IF("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU"  AND  "${CMAKE_SYSTEM_NAME}" STREQUAL "Linux")
		SET(LOCAL_CFLAGS "-fPIC")
	ELSE("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU"  AND  "${CMAKE_SYSTEM_NAME}" STREQUAL "Linux")
		SET(LOCAL_CFLAGS "")
	ENDIF("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU"  AND  "${CMAKE_SYSTEM_NAME}" STREQUAL "Linux")

	# debug
	find_package(LibSSH2 REQUIRED CONFIG)
	GET_TARGET_PROPERTY(LIBSSH2_LIBRARY Libssh2::libssh2 LOCATION)
	GET_TARGET_PROPERTY(LIBSSH2_INCLUDE_DIR Libssh2::libssh2 INTERFACE_INCLUDE_DIRECTORIES)
	MESSAGE("LIBSSH2_LIBRARY: ${LIBSSH2_LIBRARY}")
	MESSAGE("LIBSSH2_INCLUDE_DIR: ${LIBSSH2_INCLUDE_DIR}")


	SET(PRJ_CMAKE_ARGS "")
	LIST(APPEND PRJ_CMAKE_ARGS "-DBUILD_CURL_EXE=OFF")
	LIST(APPEND PRJ_CMAKE_ARGS "-DCURL_STATICLIB=ON")
	LIST(APPEND PRJ_CMAKE_ARGS "-DENABLE_THREADED_RESOLVER=OFF")
	LIST(APPEND PRJ_CMAKE_ARGS "-DENABLE_DEBUG=OFF")
	LIST(APPEND PRJ_CMAKE_ARGS "-DENABLE_CURLDEBUG=OFF")
	LIST(APPEND PRJ_CMAKE_ARGS "-DBUILD_TESTING=OFF")
	LIST(APPEND PRJ_CMAKE_ARGS "-DCMAKE_USE_OPENSSL=OFF")
	LIST(APPEND PRJ_CMAKE_ARGS "-DCMAKE_USE_LIBSSH2=ON")
	LIST(APPEND PRJ_CMAKE_ARGS "-DLibSSH2_DIR=${LibSSH2_DIR}")
	MESSAGE("LibSSH2_DIR: ${LibSSH2_DIR}")
	LIST(APPEND PRJ_CMAKE_ARGS "-DCURL_ZLIB=ON")
	LIST(APPEND PRJ_CMAKE_ARGS "-Dnet.zlib-zlib_DIR=${net.zlib-zlib_DIR}")
	MESSAGE("net.zlib-zlib_DIR: ${net.zlib-zlib_DIR}")

	LIST(APPEND PRJ_CMAKE_ARGS "-DCMAKE_C_FLAGS=${CMAKE_C_FLAGS} ${LOCAL_CFLAGS}")
	# Do not overwrite the system name if it is equal to the host system name or the CURL build script will think it is in cross-compile mode.
	IF(NOT (${CMAKE_SYSTEM_NAME} STREQUAL ${CMAKE_HOST_SYSTEM_NAME}))
		LIST(APPEND PRJ_CMAKE_ARGS "-DCMAKE_SYSTEM_NAME=${CMAKE_SYSTEM_NAME}")
	ENDIF(NOT (${CMAKE_SYSTEM_NAME} STREQUAL ${CMAKE_HOST_SYSTEM_NAME}))
	LIST(APPEND PRJ_CMAKE_ARGS "-DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}")
	# Set the ressource compiler on windows platforms.
	IF(${CMAKE_SYSTEM_NAME} STREQUAL "Windows")
		LIST(APPEND PRJ_CMAKE_ARGS "-DCMAKE_RC_COMPILER=${CMAKE_RC_COMPILER}")
	ENDIF(${CMAKE_SYSTEM_NAME} STREQUAL "Windows")
	LIST(APPEND PRJ_CMAKE_ARGS "-DCMAKE_INSTALL_PREFIX=''")
	LIST(APPEND PRJ_CMAKE_ARGS "-DPROJECT_VERSION=${VERSION_EXTERNAL}")

	ExternalProject_Add(TARGET_curl
	                    PREFIX ${CMAKE_CURRENT_BINARY_DIR}/curl-${VERSION_EXTERNAL}
	                    URL ${CMAKE_CURRENT_SOURCE_DIR}/curl-${VERSION_EXTERNAL}.tar.bz2
	                    URL_HASH SHA1=f02a14bbe580d2a8cf3bf45a79d39eb595220ac7
	                    PATCH_COMMAND "${PYTHON_EXECUTABLE}" ${CMAKE_HOME_DIRECTORY}/cmake/tools/apply_patches.py --working-folder ${CMAKE_CURRENT_BINARY_DIR}/curl-${VERSION_EXTERNAL}/src/TARGET_curl --patch-folder ${CMAKE_CURRENT_SOURCE_DIR}/patches --copy-folder ${CMAKE_CURRENT_SOURCE_DIR}/copy_over --strip 1
	                    CMAKE_ARGS ${PRJ_CMAKE_ARGS}
	                    INSTALL_COMMAND make install DESTDIR=${CMAKE_CURRENT_BINARY_DIR}/install
	)
ENDIF((${BUILDCFG_ONLY_JONCHKI_CFG} STREQUAL "OFF"))
